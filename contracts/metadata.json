{
  "compiler": {
    "version": "0.8.21+commit.d9974bed"
  },
  "language": "Solidity",
  "output": {
    "abi": [
      {
        "inputs": [
          {
            "internalType": "contract IEntryPoint",
            "name": "_entryPoint",
            "type": "address"
          },
          {
            "internalType": "address",
            "name": "_owner",
            "type": "address"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "constructor"
      },
      {
        "inputs": [
          {
            "internalType": "bytes",
            "name": "context",
            "type": "bytes",
            "indexed": false
          }
        ],
        "type": "event",
        "name": "Context",
        "anonymous": false
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "sender",
            "type": "address",
            "indexed": false
          },
          {
            "internalType": "contract IERC20",
            "name": "token",
            "type": "address",
            "indexed": false
          },
          {
            "internalType": "uint256",
            "name": "exchangeRate",
            "type": "uint256",
            "indexed": false
          },
          {
            "internalType": "uint256",
            "name": "maxFeePerGas",
            "type": "uint256",
            "indexed": false
          },
          {
            "internalType": "uint256",
            "name": "maxPriorityFeePerGas",
            "type": "uint256",
            "indexed": false
          }
        ],
        "type": "event",
        "name": "ContextDecoded",
        "anonymous": false
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "erc20Token",
            "type": "address",
            "indexed": false
          },
          {
            "internalType": "uint256",
            "name": "exchangeRate",
            "type": "uint256",
            "indexed": false
          }
        ],
        "type": "event",
        "name": "DecodeData",
        "anonymous": false
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "opGasPrice",
            "type": "uint256",
            "indexed": false
          },
          {
            "internalType": "uint256",
            "name": "actualTokenCost",
            "type": "uint256",
            "indexed": false
          }
        ],
        "type": "event",
        "name": "GasCalculation",
        "anonymous": false
      },
      {
        "inputs": [
          {
            "internalType": "string",
            "name": "message",
            "type": "string",
            "indexed": false
          }
        ],
        "type": "event",
        "name": "OpGasMethod",
        "anonymous": false
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "previousOwner",
            "type": "address",
            "indexed": true
          },
          {
            "internalType": "address",
            "name": "newOwner",
            "type": "address",
            "indexed": true
          }
        ],
        "type": "event",
        "name": "OwnershipTransferred",
        "anonymous": false
      },
      {
        "inputs": [
          {
            "internalType": "string",
            "name": "message",
            "type": "string",
            "indexed": false
          },
          {
            "internalType": "enum IPaymaster.PostOpMode",
            "name": "mode",
            "type": "uint8",
            "indexed": false
          },
          {
            "internalType": "uint256",
            "name": "actualGasCost",
            "type": "uint256",
            "indexed": false
          }
        ],
        "type": "event",
        "name": "PostOp",
        "anonymous": false
      },
      {
        "inputs": [
          {
            "internalType": "string",
            "name": "message",
            "type": "string",
            "indexed": false
          }
        ],
        "type": "event",
        "name": "Transfer",
        "anonymous": false
      },
      {
        "inputs": [],
        "stateMutability": "view",
        "type": "function",
        "name": "POST_OP_GAS",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ]
      },
      {
        "inputs": [
          {
            "internalType": "uint32",
            "name": "unstakeDelaySec",
            "type": "uint32"
          }
        ],
        "stateMutability": "payable",
        "type": "function",
        "name": "addStake"
      },
      {
        "inputs": [],
        "stateMutability": "payable",
        "type": "function",
        "name": "deposit"
      },
      {
        "inputs": [],
        "stateMutability": "view",
        "type": "function",
        "name": "entryPoint",
        "outputs": [
          {
            "internalType": "contract IEntryPoint",
            "name": "",
            "type": "address"
          }
        ]
      },
      {
        "inputs": [],
        "stateMutability": "view",
        "type": "function",
        "name": "getDeposit",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ]
      },
      {
        "inputs": [],
        "stateMutability": "view",
        "type": "function",
        "name": "owner",
        "outputs": [
          {
            "internalType": "address",
            "name": "",
            "type": "address"
          }
        ]
      },
      {
        "inputs": [
          {
            "internalType": "enum IPaymaster.PostOpMode",
            "name": "mode",
            "type": "uint8"
          },
          {
            "internalType": "bytes",
            "name": "context",
            "type": "bytes"
          },
          {
            "internalType": "uint256",
            "name": "actualGasCost",
            "type": "uint256"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function",
        "name": "postOp"
      },
      {
        "inputs": [],
        "stateMutability": "nonpayable",
        "type": "function",
        "name": "renounceOwnership"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "_limit",
            "type": "uint256"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function",
        "name": "setSponsoredGasLimit"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "_vault",
            "type": "address"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function",
        "name": "setVault"
      },
      {
        "inputs": [],
        "stateMutability": "view",
        "type": "function",
        "name": "sponsoredGasLimit",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ]
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "newOwner",
            "type": "address"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function",
        "name": "transferOwnership"
      },
      {
        "inputs": [],
        "stateMutability": "nonpayable",
        "type": "function",
        "name": "unlockStake"
      },
      {
        "inputs": [
          {
            "internalType": "struct UserOperation",
            "name": "userOp",
            "type": "tuple",
            "components": [
              {
                "internalType": "address",
                "name": "sender",
                "type": "address"
              },
              {
                "internalType": "uint256",
                "name": "nonce",
                "type": "uint256"
              },
              {
                "internalType": "bytes",
                "name": "initCode",
                "type": "bytes"
              },
              {
                "internalType": "bytes",
                "name": "callData",
                "type": "bytes"
              },
              {
                "internalType": "uint256",
                "name": "callGasLimit",
                "type": "uint256"
              },
              {
                "internalType": "uint256",
                "name": "verificationGasLimit",
                "type": "uint256"
              },
              {
                "internalType": "uint256",
                "name": "preVerificationGas",
                "type": "uint256"
              },
              {
                "internalType": "uint256",
                "name": "maxFeePerGas",
                "type": "uint256"
              },
              {
                "internalType": "uint256",
                "name": "maxPriorityFeePerGas",
                "type": "uint256"
              },
              {
                "internalType": "bytes",
                "name": "paymasterAndData",
                "type": "bytes"
              },
              {
                "internalType": "bytes",
                "name": "signature",
                "type": "bytes"
              }
            ]
          },
          {
            "internalType": "bytes32",
            "name": "userOpHash",
            "type": "bytes32"
          },
          {
            "internalType": "uint256",
            "name": "maxCost",
            "type": "uint256"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function",
        "name": "validatePaymasterUserOp",
        "outputs": [
          {
            "internalType": "bytes",
            "name": "context",
            "type": "bytes"
          },
          {
            "internalType": "uint256",
            "name": "validationData",
            "type": "uint256"
          }
        ]
      },
      {
        "inputs": [],
        "stateMutability": "view",
        "type": "function",
        "name": "vault",
        "outputs": [
          {
            "internalType": "address",
            "name": "",
            "type": "address"
          }
        ]
      },
      {
        "inputs": [
          {
            "internalType": "address payable",
            "name": "withdrawAddress",
            "type": "address"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function",
        "name": "withdrawStake"
      },
      {
        "inputs": [
          {
            "internalType": "address payable",
            "name": "withdrawAddress",
            "type": "address"
          },
          {
            "internalType": "uint256",
            "name": "amount",
            "type": "uint256"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function",
        "name": "withdrawTo"
      },
      {
        "inputs": [],
        "stateMutability": "payable",
        "type": "receive"
      }
    ],
    "devdoc": {
      "kind": "dev",
      "methods": {
        "addStake(uint32)": {
          "params": {
            "unstakeDelaySec": "- The unstake delay for this paymaster. Can only be increased."
          }
        },
        "owner()": {
          "details": "Returns the address of the current owner."
        },
        "postOp(uint8,bytes,uint256)": {
          "params": {
            "actualGasCost": "- Actual gas used so far (without this postOp call).",
            "context": "- The context value returned by validatePaymasterUserOp",
            "mode": "- Enum with the following options:                        opSucceeded - User operation succeeded.                        opReverted  - User op reverted. still has to pay for gas.                        postOpReverted - User op succeeded, but caused postOp (in mode=opSucceeded) to revert.                                         Now this is the 2nd call, after user's op was deliberately reverted."
          }
        },
        "renounceOwnership()": {
          "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
        },
        "transferOwnership(address)": {
          "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
        },
        "validatePaymasterUserOp((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes),bytes32,uint256)": {
          "params": {
            "maxCost": "- The maximum cost of this transaction (based on maximum gas and gas price from userOp).",
            "userOp": "- The user operation.",
            "userOpHash": "- Hash of the user's request data."
          },
          "returns": {
            "context": "       - Value to send to a postOp. Zero length to signify postOp is not required.",
            "validationData": "- Signature and time-range of this operation, encoded the same as the return                          value of validateUserOperation.                          <20-byte> sigAuthorizer - 0 for valid signature, 1 to mark signature failure,                                                    otherwise, an address of an \"authorizer\" contract.                          <6-byte> validUntil - last timestamp this operation is valid. 0 for \"indefinite\"                          <6-byte> validAfter - first timestamp this operation is valid                          Note that the validation code cannot use block.timestamp (or block.number) directly."
          }
        },
        "withdrawStake(address)": {
          "params": {
            "withdrawAddress": "- The address to send withdrawn value."
          }
        },
        "withdrawTo(address,uint256)": {
          "params": {
            "amount": "- Amount to withdraw.",
            "withdrawAddress": "- Target to send to."
          }
        }
      },
      "version": 1
    },
    "userdoc": {
      "kind": "user",
      "methods": {
        "addStake(uint32)": {
          "notice": "Add stake for this paymaster. This method can also carry eth value to add to the current stake."
        },
        "deposit()": {
          "notice": "Add a deposit for this paymaster, used for paying for transaction fees."
        },
        "getDeposit()": {
          "notice": "Return current paymaster's deposit on the entryPoint."
        },
        "postOp(uint8,bytes,uint256)": {
          "notice": "Post-operation handler. Must verify sender is the entryPoint."
        },
        "unlockStake()": {
          "notice": "Unlock the stake, in order to withdraw it. The paymaster can't serve requests once unlocked, until it calls addStake again"
        },
        "validatePaymasterUserOp((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes),bytes32,uint256)": {
          "notice": "Payment validation: check if paymaster agrees to pay. Must verify sender is the entryPoint. Revert to reject this request. Note that bundlers will reject this method if it changes the state, unless the paymaster is trusted (whitelisted). The paymaster pre-pays using its deposit, and receive back a refund after the postOp method returns."
        },
        "withdrawStake(address)": {
          "notice": "Withdraw the entire paymaster's stake. stake must be unlocked first (and then wait for the unstakeDelay to be over)"
        },
        "withdrawTo(address,uint256)": {
          "notice": "Withdraw value from the deposit."
        }
      },
      "version": 1
    }
  },
  "settings": {
    "remappings": [
      "@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/",
      "account-abstraction/=lib/account-abstraction/contracts/",
      "ds-test/=lib/forge-std/lib/ds-test/src/",
      "erc4626-tests/=lib/p256-verifier/lib/openzeppelin-contracts/lib/erc4626-tests/",
      "forge-std/=lib/forge-std/src/",
      "openzeppelin-contracts/=lib/openzeppelin-contracts/",
      "p256-verifier/=lib/p256-verifier/src/"
    ],
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "metadata": {
      "bytecodeHash": "none"
    },
    "compilationTarget": {
      "src/Paymaster.sol": "Paymaster"
    },
    "evmVersion": "paris",
    "libraries": {},
    "viaIR": true
  },
  "sources": {
    "lib/account-abstraction/contracts/core/BasePaymaster.sol": {
      "keccak256": "0x61860e811138a587a915c23c2651f2462e0a9bea24b2be4f6c54f93f42e8895b",
      "urls": [
        "bzz-raw://69b7e5a6f3d71f6ed47f2804b9ff1213619a53a699c5d687bbc1d8d5d24413ac",
        "dweb:/ipfs/QmNoyB5b2EYuFUpnXKaN1PPvv9Q28E282qUAYmoj7hcsT5"
      ],
      "license": "GPL-3.0"
    },
    "lib/account-abstraction/contracts/core/Helpers.sol": {
      "keccak256": "0x81b70ea6183fd28e6c00dc3cf357c8453abdd4cc46ec628e7589e4b6a188d626",
      "urls": [
        "bzz-raw://f4a99aced25a842721a2495760af84b874c1f730c94f8b3e76c71c8b757c90f5",
        "dweb:/ipfs/QmacEJqVFbwQxE4HTzqvWWAFT7uSbH2Yd7EMqdCx1DxzBz"
      ],
      "license": "GPL-3.0"
    },
    "lib/account-abstraction/contracts/core/UserOperationLib.sol": {
      "keccak256": "0x1e28b1f8dac93be686129400777b000c960b0bcc2896a2e0535806f2f0dd7cca",
      "urls": [
        "bzz-raw://76911056faaf865efff923267e5c5b556f6b019787a2ec55ffa856bace497108",
        "dweb:/ipfs/QmSFQj5DraQNMJCrn7GWSrN6iXRJ9Q9RpcmCGZ1bZg9emR"
      ],
      "license": "GPL-3.0"
    },
    "lib/account-abstraction/contracts/interfaces/IAggregator.sol": {
      "keccak256": "0xfc37d01c654f967c0f33b0edcb074231d30841f6fe1b23a070564f13c497b111",
      "urls": [
        "bzz-raw://490630958f3a1861ad16db742e891b8c9f6f229a11f942d25ff58e9bab983c37",
        "dweb:/ipfs/QmYcvJxvXrXWvDUp6XZZirzjMqk5BaWdmsWWsEtamiuDu9"
      ],
      "license": "GPL-3.0"
    },
    "lib/account-abstraction/contracts/interfaces/IEntryPoint.sol": {
      "keccak256": "0x9cdadcebb6491f50a7c136e560f1eb51e785a79ebfa29605a0c5eee3c60adb19",
      "urls": [
        "bzz-raw://236356329adad328f489629e53a141f8842fa00ad42c16cf9ea031cfe77bfa82",
        "dweb:/ipfs/QmRgjTghLaTcA3xbx6vcfVu6aCUK6W1iN8JS8ric2DPy1x"
      ],
      "license": "GPL-3.0"
    },
    "lib/account-abstraction/contracts/interfaces/INonceManager.sol": {
      "keccak256": "0x509871e6c63663cdcc3eba19920fe84e991f38b289b1377ac3c3a6d9f22d7e12",
      "urls": [
        "bzz-raw://00fe21b4349b24c50df60e1a705179293982bd9e7a32b78d4bac9620f89e7fe2",
        "dweb:/ipfs/QmSFFYGfUwQbVa6hASjU7YxTvgi2HkfrPr4X5oPHscHg8b"
      ],
      "license": "GPL-3.0"
    },
    "lib/account-abstraction/contracts/interfaces/IPaymaster.sol": {
      "keccak256": "0x7914ced73c8c6cd2874dd47a1d8cb0b5344ac5ab91b675f868ae2e5be5a6c88f",
      "urls": [
        "bzz-raw://ce558c2e28243f73fbff7e16882719627e7bcd58d3e811fe344a08921aaba49c",
        "dweb:/ipfs/QmWCzBqTyPuTpBXXvNaXSRbqPqUQuzCyNhSXCGKiMPJbUw"
      ],
      "license": "GPL-3.0"
    },
    "lib/account-abstraction/contracts/interfaces/IStakeManager.sol": {
      "keccak256": "0x10cdaa14cd2b08279e02c2d4863cea18cfb7e11d7a33cf740755f9a025e7bda1",
      "urls": [
        "bzz-raw://3d214ceee25812bb2a8176dd245a399d84d222cf7f9cf0bc3937afad372f0b7a",
        "dweb:/ipfs/QmZxqSic8cGeis7R7ufUjf95CgTpyAFY9nCHuiLPbESbYr"
      ],
      "license": "GPL-3.0-only"
    },
    "lib/account-abstraction/contracts/interfaces/UserOperation.sol": {
      "keccak256": "0x093777cb7097dccaffd631d07dfdbd0f731371efe3770fbe22a0c992af4eb4f6",
      "urls": [
        "bzz-raw://6da218e65b43a3f99247b2c66c5946eaa48f2719a0f58469d3a80b4d24b28f00",
        "dweb:/ipfs/QmQ3np8AwPkWw9Ey4DMMQNJgPSVw3fdrX8wnLaVgYyiaQn"
      ],
      "license": "GPL-3.0"
    },
    "lib/openzeppelin-contracts/contracts/access/Ownable.sol": {
      "keccak256": "0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673",
      "urls": [
        "bzz-raw://40fb1b5102468f783961d0af743f91b9980cf66b50d1d12009f6bb1869cea4d2",
        "dweb:/ipfs/QmYqEbJML4jB1GHbzD4cUZDtJg5wVwNm3vDJq1GbyDus8y"
      ],
      "license": "MIT"
    },
    "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol": {
      "keccak256": "0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b",
      "urls": [
        "bzz-raw://5a7d5b1ef5d8d5889ad2ed89d8619c09383b80b72ab226e0fe7bde1636481e34",
        "dweb:/ipfs/QmebXWgtEfumQGBdVeM6c71McLixYXQP5Bk6kKXuoY4Bmr"
      ],
      "license": "MIT"
    },
    "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/draft-IERC20Permit.sol": {
      "keccak256": "0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329",
      "urls": [
        "bzz-raw://b2717fd2bdac99daa960a6de500754ea1b932093c946388c381da48658234b95",
        "dweb:/ipfs/QmP6QVMn6UeA3ByahyJbYQr5M6coHKBKsf3ySZSfbyA8R7"
      ],
      "license": "MIT"
    },
    "lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol": {
      "keccak256": "0x9b72f93be69ca894d8492c244259615c4a742afc8d63720dbc8bb81087d9b238",
      "urls": [
        "bzz-raw://f5a7b96e511be78d5cdf635c784e6ab8cdd38625bb8cafb8a80914a1c89cf0f6",
        "dweb:/ipfs/QmVzTCwJxQAkjRQHboT5QrvsVJGWQHgfEjeTbvyxoKBrds"
      ],
      "license": "MIT"
    },
    "lib/openzeppelin-contracts/contracts/utils/Address.sol": {
      "keccak256": "0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1",
      "urls": [
        "bzz-raw://ec772b45a624be516f1c81970caa8a2e144301e9d0921cbc1a2789fef39a1269",
        "dweb:/ipfs/QmNyjwxCrGhQMyzLD93oUobJXVe9ceJvRvfXwbEtuxPiEj"
      ],
      "license": "MIT"
    },
    "lib/openzeppelin-contracts/contracts/utils/Context.sol": {
      "keccak256": "0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7",
      "urls": [
        "bzz-raw://6df0ddf21ce9f58271bdfaa85cde98b200ef242a05a3f85c2bc10a8294800a92",
        "dweb:/ipfs/QmRK2Y5Yc6BK7tGKkgsgn3aJEQGi5aakeSPZvS65PV8Xp3"
      ],
      "license": "MIT"
    },
    "lib/openzeppelin-contracts/contracts/utils/math/Math.sol": {
      "keccak256": "0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6",
      "urls": [
        "bzz-raw://33bbf48cc069be677705037ba7520c22b1b622c23b33e1a71495f2d36549d40b",
        "dweb:/ipfs/Qmct36zWXv3j7LZB83uwbg7TXwnZSN1fqHNDZ93GG98bGz"
      ],
      "license": "MIT"
    },
    "src/Paymaster.sol": {
      "keccak256": "0x56ad6edf59ebfa0534ffad1705e2d108da356766507e4a237b0632b4bc615beb",
      "urls": [
        "bzz-raw://073c52438e7dde4b3e0bc091d8ffffc04fede74c0a9532e6d89ea3187cedf7a5",
        "dweb:/ipfs/QmYVDaTTxuHYpzKhCy3WpzPHmPQr95KU43P8sRwsczMUCM"
      ],
      "license": "GPL-3.0"
    }
  },
  "version": 1
}
